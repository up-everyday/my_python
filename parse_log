import time
import re
import json
import os
def exclude_pat(line_cont):
    if r'AAFS_Refresh_Event_Type' in line_cont:
        return 1
    elif r'Initialize_LDAP_Request_Queue' in line_cont:
        return 2
    elif r'Monitor_SwitchOver_Status'in line_cont:
        return 3
    elif r'Initialize_Minute_Audit'in line_cont:
        return 4
    elif r'timer!expired'in line_cont:
        return 5
    elif r'timer!allocated'in line_cont:
        return 6
    elif r'Request_Generate_COSP_Level_Measurement'in line_cont:
        return 7
    elif r'Initialize_UAS_Counter_AysnMsg_Queue'in line_cont:
        return 8
    elif r'RC_Table_Refresh'in line_cont:
        return 9
    elif r'time_out'in line_cont:
        return 10
    elif r'Heart_Beat_Request'in line_cont:
        return 11
    elif r'CPU_Overload_Monitor'in line_cont:
        return 12

    else:
        return -1
def care_str_pat(line_cont):
    SIM_RTDB_read_pattern = r'SIM_RTDB!read_completed'
    SIM_RTDB_update_pattern = r'SIM_RTDB!update'
    Counter_RTDB_read_pattern = r'Counter_RTDB!read_completed'
    Counter_RTDB_update_pattern = r'Counter_RTDB!update'
    CCR_pattern = r'TRACE:      diameter!credit_control_request_received'
    AMA_Other_pattern = r'AMA_Other_Generation'
    AMA_PS_pattern = r'AMA_PS_Generation'
    AMA_CS_pattern = r'AMA_CS_Generation'
    Setup_Diameter_Call_Type_pattern = r'P_CF!Setup_Diameter_Call_Type'
    imom_pattern = r'usli_request'
    if SIM_RTDB_read_pattern in line_cont:
        return 1 #SIM_RTDB_read_pattern
    elif SIM_RTDB_update_pattern in line_cont:
        return 1 #SIM_RTDB_read_pattern
    elif Counter_RTDB_read_pattern in line_cont:
        return 2 #Counter_RTDB_read_pattern
    elif Counter_RTDB_update_pattern in line_cont:
        return 2 #Counter_RTDB_update_pattern
    elif CCR_pattern in line_cont or imom_pattern in line_cont:
        return 3 #CCR_pattern
    elif AMA_Other_pattern in line_cont:
        return 4
    elif AMA_PS_pattern in line_cont:
        return 5
    elif AMA_CS_pattern in line_cont:
        return 6
    elif Setup_Diameter_Call_Type_pattern in line_cont:
        return 7
    else:
        return 0

def parse_ama_rec(tmp_rec):
    AMA_Event_Label_pattern = r'AMA_Event_Label=.*?,'
    AMA_Event_Result_pattern = r'AMA_Event_Result=.*?,'
    AMA_Request_Event_Label_pattern = r'AMA_Request_Event_Label=.*?,'
    AMA_Request_Event_Result_pattern = r'AMA_Request_Event_Result=.*?,'
    Pre_Call_EBucket_pattern = r'Pre_Call_EBucket_Value_rec=String_Rec\(.*?\)'
    Post_Call_EBucket_pattern = r'Post_Call_EBucket_Value_rec=String_Rec\(.*?\)'
    Pre_Call_CUC_Counter_pattern = r'Pre_Call_CUC_Counter_rec=String_Rec\(.*?\)'
    Post_Call_CUC_Counter_pattern = r'Post_Call_CUC_Counter_rec=String_Rec\(.*?\)'
    Bundle_Start_Date_pattern = r'Bundle_Start_Date_rec=String_Rec\(.*?\)'
    Bundle_Period_End_Date_pattern = r'Bundle_Period_End_Date_rec=String_Rec\(.*?\)'
    Bundle_Period_Start_Date_pattern = r'Bundle_Period_Start_Date_rec=String_Rec\(.*?\)'
    Bundle_Period_Length_pattern = r'Bundle_Period_Length_rec=String_Rec\(.*?\)'
    Family_Group_Service_Data_pattern = r'Family_Group_Service_Data_rec=String_Rec\(.*?\)'
    Reference_Data_pattern = r'Reference_Data_rec=AMA_Reference_Data_rec\(.*?\)'
    Bundle_AMA_Code_pattern = r'Bundle_AMA_Code_rec=String_Rec\(.*?\)'
    Discount_Expiration_Date_pattern = r'Discount_Expiration_Date_rec=String_Rec\(.*?\)'
    Pre_Event_Bkt_Reset_Val_pattern = r'Pre_Event_Bkt_Reset_Val_rec=String_Rec\(.*?\)'
    Post_Event_Bkt_Reset_Val_pattern = r'Post_Event_Bkt_Reset_Val_rec=String_Rec\(.*?\)'
    AOC_Tariff_ID_pattern = r'AOC_Tariff_ID=AOC_Tariff_rec\(.*?\)'
    SPL_CounterThre_pattern = r'SPL_CounterThre_Rec=String_Rec\(.*?\)'
    Revenue_Sharing_Cost_pattern = r'Revenue_Sharing_Cost_rec=Counter_Rec\(.*?\)'
    Revenue_Sharing_Usage_Type_pattern = r'Revenue_Sharing_Usage_Type_rec=String_Six_Rec\(.*?\)'
    Service_Data_pattern = r'Service_Data_rec=String_Rec\(.*?\)'
    Changed_Counter_Value_pattern = r'Changed_Counter_Value_rec=String_Rec\(.*?\)'
    Applied_Family_Group_ID_pattern = r'Applied_Family_Group_ID_rec=String_Rec\(.*?\)'
    Asset_ID_pattern = r'Asset_ID_rec=String_Rec\(.*?\)'
    Bundle_FF_Number_pattern = r'Bundle_FF_Number_rec=String_Four_Rec\(.*?\)'
    Max_Threshold_For_Bucket_pattern = r'Max_Threshold_For_Bucket_rec=String_Rec\(.*?\)'
    Group_Counter_Allotment_Value_pattern = r'Group_Counter_Allotment_Value_rec=String_Rec\(.*?\)'
    Changed_Counter_Value_Mapped_pattern = r'Changed_Counter_Value_Mapped_rec=String_Rec\(.*?\)'
    FG_Changed_Counter_Value_Mapped_pattern = r'FG_Changed_Counter_Value_Mapped_rec=String_Rec\(.*?\)'
    Max_Neg_Threshold_For_Bucket_pattern = r'Max_Neg_Threshold_For_Bucket_rec=String_Rec\(.*?\)'
    special_patterns = [
                        AMA_Request_Event_Label_pattern,AMA_Request_Event_Result_pattern,
                        AMA_Event_Label_pattern, AMA_Event_Result_pattern,
                        Pre_Call_EBucket_pattern, Post_Call_EBucket_pattern,
                        Family_Group_Service_Data_pattern, Reference_Data_pattern,
                        Bundle_AMA_Code_pattern, Pre_Call_CUC_Counter_pattern,
                        Post_Call_CUC_Counter_pattern, AOC_Tariff_ID_pattern,
                        SPL_CounterThre_pattern, Revenue_Sharing_Cost_pattern,
                        Revenue_Sharing_Usage_Type_pattern, Service_Data_pattern,
                        Bundle_Start_Date_pattern, Bundle_Period_End_Date_pattern,
                        Bundle_Period_Start_Date_pattern, Bundle_Period_Length_pattern,
                        Changed_Counter_Value_pattern, Applied_Family_Group_ID_pattern,
                        Asset_ID_pattern, Changed_Counter_Value_Mapped_pattern,
                        FG_Changed_Counter_Value_Mapped_pattern, Max_Neg_Threshold_For_Bucket_pattern,
                        Group_Counter_Allotment_Value_pattern,Discount_Expiration_Date_pattern,
                        Bundle_FF_Number_pattern, Pre_Event_Bkt_Reset_Val_pattern,
                        Post_Event_Bkt_Reset_Val_pattern, Max_Threshold_For_Bucket_pattern]

    all_fields_val_list = []
    #deal with special pattern
    for pattern in special_patterns:
        res = re.search(pattern, tmp_rec)
        if res != None:
            cont = res.group()
            all_fields_val_list.append(cont)
            tmp_rec = tmp_rec.replace(cont, '')
    #deal with common pattern
    left_paren_pos_list = [match.start() for match in re.finditer('\(', tmp_rec)]
    for i in range(len(left_paren_pos_list)):
        match_obj = re.search('\)',tmp_rec)
        if (match_obj != None):
            right_paren_pos = match_obj.start()
            left_paren_pos_list = [match.start() for match in re.finditer('\(',tmp_rec[:right_paren_pos+1])]
            content = tmp_rec[left_paren_pos_list[-1]:right_paren_pos+1]
            tmp_rec = tmp_rec.replace(content,'')
            fields_val_list = content[1:-1].split(',')  #excluded '()'
            all_fields_val_list.extend(fields_val_list)
        else:
            all_fields_val_list.extend(fields_val_list)
            break
    return all_fields_val_list
def rtdb_pat_set(tmp_rec):
    rtdb_found_flag = False
    pattern = ''
    rtdb_name = ''
    if tmp_rec.find('SIM_RTDB!read_completed') != -1 or tmp_rec.find('SIM_RTDB!update(') != -1:
        pattern = r'SIM_RTDB_fields\(.*?\)'
        rtdb_name = 'sim_rtdb.log'
        rtdb_found_flag = True
    elif tmp_rec.find('Counter_RTDB!read_completed') != -1 or \
                    tmp_rec.find('Counter_RTDB!update(') != -1:
        pattern = r'Counter_RTDB_fields\(.*?\)'
        rtdb_name = 'counter_rtdb.log'
        rtdb_found_flag = True
    return (rtdb_found_flag, pattern, rtdb_name)
def parse_rtdb(tmp_rec, pattern):
    result = re.search(pattern, tmp_rec)
    if None != result:
        cont = result.group()
        rtdb_rec = cont.split(',')
    return rtdb_rec
def save_rtdb_recs(tmp_rec, dir_name, pattern, rtdb_name):
    if "SIM_Key" in tmp_rec:
        key = r'SIM_Key.*?,'
    elif 'CT_Key'in tmp_rec:
        key = r'CT_Key.*?,'
    else:
        key = ''
    if len(tmp_rec) != 0 and key:
            result = re.findall(key, tmp_rec)
            match = re.findall(r'=(.*?),', result[0])
            print("4444",match[0])
    file_name = rtdb_name + '-'+ match[0].replace(':','_')
    rtdb_rec = parse_rtdb(tmp_rec, pattern)
    if len(rtdb_rec) != 0:
        with open(os.path.join(dir_name,file_name), 'a+t') as f:
            f.write("##########new recodes################")
            f.write(json.dumps(rtdb_rec,indent=4))
def save_recs(tmp_rec, dir_name):
    if tmp_rec.find('AMA_Other_Generation') != -1 or \
                    tmp_rec.find('AMA_PS_Generation') != -1 or \
                    tmp_rec.find('AMA_CS_Generation') != -1:
        all_fields_val_list = parse_ama_rec(tmp_rec)
        with open(os.path.join(dir_name,'ama.log'), 'a+t') as f:
            f.write("##########new recodes################")
            f.write(json.dumps(all_fields_val_list,indent=4))

def print_care_fields(tmp_rec):
    if "SIM_Key" in tmp_rec:
        care_fileds = [r'SIM_Key.*?,', r'Language.*?,']
    elif 'CT_Key'in tmp_rec:
        care_fileds = [r'CT_Key.*?,', r'Counter_ID_1.*?,']
    # 'diameter!credit_control_request_received' also includes in p_cf , so it must be put here.
    elif 'P_CF!Setup_Diameter_Call_Type' in tmp_rec:
        #print("####tmp_rec",tmp_rec)
        care_fileds = [r'CC_Request_Type=.*?,', r'CC_Request_Number=.*?,',r'Category_ID=.*?,', r'Status_Of_Call=.*?,']
    elif 'diameter!credit_control_request_received' in tmp_rec:
        care_fileds = [r'cc_request_number=[\d]{1,3}?', r'cc_request_type=diameter_crte.*?,']
    elif 'AMA_Other_Generation' in tmp_rec or 'AMA_CS_Generation' in tmp_rec:
        AMA_Event_Label_pattern = r'AMA_Event_Label=.*?,'
        AMA_Event_Result_pattern = r'AMA_Event_Result=.*?,'
        AMA_Request_Event_Label_pattern = r'AMA_Request_Event_Label=.*?,'
        AMA_Request_Event_Result_pattern = r'AMA_Request_Event_Result=.*?,'
        care_fileds = [AMA_Event_Label_pattern, AMA_Event_Result_pattern,
                       AMA_Request_Event_Label_pattern, AMA_Request_Event_Result_pattern]

    else:
        care_fileds = []
    if len(tmp_rec) != 0:
        for field in care_fileds:
            result = re.findall(field, tmp_rec)
            print("     ", result)

def parse_log(file_name):
    #get a record
    left_paren = 0
    right_paren = 0
    find_flag = False
    unwanted_pattern = '[\n ]' #note bracket
    trace_pattern = r'TRACE:   '

    instance_id_pattern = r'TRACE:.*?\[\d{1,10}\]'

    dir_name = os.path.dirname(file_name)
    with open(file_name, 'rt') as f:
        data = f.readlines()
        print("len of data %s ", len(data))
        content = list(map(str.strip,data))

        first_trace_flag = False
        rtdb_rec_count = 0
        for line in enumerate(content, start=1):
            line_num, line_cont = line

            #get instanc id and trace
            if re.search(trace_pattern, line_cont) != None:  #Trace
                ret = care_str_pat(line_cont)
                ret_exclu =  exclude_pat(line_cont)
                if ret == 3: #CCR_pattern, first trace:
                    first_trace_flag = True
                if ret or first_trace_flag and ret_exclu == -1:  ##recondider
                    instance_str = ''.join(content[line_num - 4:line_num - 1])
                    instance_cont = re.search(instance_id_pattern, instance_str)
                    if instance_cont != None:
                        instance_cont = instance_cont.group()
                        print("id#", instance_cont)
                    print("t$", line_num, line_cont)

            #get a record

            if care_str_pat(line_cont):
                find_flag = True
                counter_rec_tmp_list = []  # init
            if find_flag:
                left_paren = left_paren + line_cont.count('(')
                right_paren = right_paren + line_cont.count(')')
                tmp = re.sub(unwanted_pattern, '', line_cont)
                counter_rec_tmp_list.append(tmp)
                if left_paren == right_paren:
                    find_flag = False
                    tmp_rec = ''.join(counter_rec_tmp_list)
                    print_care_fields(tmp_rec)
                    rtdb_found_flag, pattern, rtdb_name = rtdb_pat_set(tmp_rec)
                    if rtdb_found_flag:
                        rtdb_rec_count = rtdb_rec_count + 1
                        rtdb_name = rtdb_name +'_' + str(rtdb_rec_count)
                        save_rtdb_recs(tmp_rec, dir_name, pattern, rtdb_name)
                    save_recs(tmp_rec, dir_name)

if __name__ == '__main__':
    start = time.time()
    log_name = r"D:/CE/VFGR-SPRDSR-1821/test_ama_1.log"
    parse_log(log_name)
    end = time.time()
    print("elapsed time is ", (end-start))
